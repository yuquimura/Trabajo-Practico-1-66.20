00000a70 <arr_merge>:
#include <stdio.h>
#include <stdbool.h>
#include <stdlib.h>
#include "MergeSort.h"

int* arr_merge(int* vector1, size_t n1, int* vector2, size_t n2){
     a70:	3c1c0002 	lui	gp,0x2
     a74:	279c93d0 	addiu	gp,gp,-27696
     a78:	0399e021 	addu	gp,gp,t9
     a7c:	27bdffd0 	addiu	sp,sp,-48
     a80:	afbf002c 	sw	ra,44(sp)
     a84:	afbe0028 	sw	s8,40(sp)
     a88:	03a0f025 	move	s8,sp
     a8c:	afbc0010 	sw	gp,16(sp)
     a90:	afc40030 	sw	a0,48(s8)
     a94:	afc50034 	sw	a1,52(s8)
     a98:	afc60038 	sw	a2,56(s8)
     a9c:	afc7003c 	sw	a3,60(s8)

	//Posiciones relativas de cada vector
	int p1 = 0;
     aa0:	afc00018 	sw	zero,24(s8)
	int p2 = 0;
     aa4:	afc0001c 	sw	zero,28(s8)
	int* merged = malloc(sizeof(int)*(n1+n2));
     aa8:	8fc30034 	lw	v1,52(s8)
     aac:	8fc2003c 	lw	v0,60(s8)
     ab0:	00621021 	addu	v0,v1,v0
     ab4:	00021080 	sll	v0,v0,0x2
     ab8:	00402025 	move	a0,v0
     abc:	8f828098 	lw	v0,-32616(gp)
     ac0:	0040c825 	move	t9,v0
     ac4:	0320f809 	jalr	t9
     ac8:	00000000 	nop
     acc:	8fdc0010 	lw	gp,16(s8)
     ad0:	afc20024 	sw	v0,36(s8)

	for( int i = 0; i < n1 + n2 ; i++){
     ad4:	afc00020 	sw	zero,32(s8)
     ad8:	1000004f 	b	c18 <arr_merge+0x1a8>
     adc:	00000000 	nop

		//Si la p1 alcanzo n1 entonces termine de iterar el primero vector
		if( p1 == n1 ){
     ae0:	8fc30018 	lw	v1,24(s8)
     ae4:	8fc20034 	lw	v0,52(s8)
     ae8:	1462000f 	bne	v1,v0,b28 <arr_merge+0xb8>
     aec:	00000000 	nop
			merged[i] = vector2[p2++];
     af0:	8fc20020 	lw	v0,32(s8)
     af4:	00021080 	sll	v0,v0,0x2
     af8:	8fc30024 	lw	v1,36(s8)
     afc:	00621821 	addu	v1,v1,v0
     b00:	8fc2001c 	lw	v0,28(s8)
     b04:	24440001 	addiu	a0,v0,1
     b08:	afc4001c 	sw	a0,28(s8)
     b0c:	00021080 	sll	v0,v0,0x2
     b10:	8fc40038 	lw	a0,56(s8)
     b14:	00821021 	addu	v0,a0,v0
     b18:	8c420000 	lw	v0,0(v0)
     b1c:	ac620000 	sw	v0,0(v1)
     b20:	1000003a 	b	c0c <arr_merge+0x19c>
     b24:	00000000 	nop
		//Si la p2 alcanzo n2 entonces termine de iterar el segundo vector
		}else if ( p2 == n2 ){
     b28:	8fc3001c 	lw	v1,28(s8)
     b2c:	8fc2003c 	lw	v0,60(s8)
     b30:	1462000f 	bne	v1,v0,b70 <arr_merge+0x100>
     b34:	00000000 	nop
			merged[i] = vector1[p1++];
     b38:	8fc20020 	lw	v0,32(s8)
     b3c:	00021080 	sll	v0,v0,0x2
     b40:	8fc30024 	lw	v1,36(s8)
     b44:	00621821 	addu	v1,v1,v0
     b48:	8fc20018 	lw	v0,24(s8)
     b4c:	24440001 	addiu	a0,v0,1
     b50:	afc40018 	sw	a0,24(s8)
     b54:	00021080 	sll	v0,v0,0x2
     b58:	8fc40030 	lw	a0,48(s8)
     b5c:	00821021 	addu	v0,a0,v0
     b60:	8c420000 	lw	v0,0(v0)
     b64:	ac620000 	sw	v0,0(v1)
     b68:	10000028 	b	c0c <arr_merge+0x19c>
     b6c:	00000000 	nop
		}else if (vector1[p1] < vector2[p2]){
     b70:	8fc20018 	lw	v0,24(s8)
     b74:	00021080 	sll	v0,v0,0x2
     b78:	8fc30030 	lw	v1,48(s8)
     b7c:	00621021 	addu	v0,v1,v0
     b80:	8c430000 	lw	v1,0(v0)
     b84:	8fc2001c 	lw	v0,28(s8)
     b88:	00021080 	sll	v0,v0,0x2
     b8c:	8fc40038 	lw	a0,56(s8)
     b90:	00821021 	addu	v0,a0,v0
     b94:	8c420000 	lw	v0,0(v0)
     b98:	0062102a 	slt	v0,v1,v0
     b9c:	1040000f 	beqz	v0,bdc <arr_merge+0x16c>
     ba0:	00000000 	nop
			merged[i] = vector1[p1++];
     ba4:	8fc20020 	lw	v0,32(s8)
     ba8:	00021080 	sll	v0,v0,0x2
     bac:	8fc30024 	lw	v1,36(s8)
     bb0:	00621821 	addu	v1,v1,v0
     bb4:	8fc20018 	lw	v0,24(s8)
     bb8:	24440001 	addiu	a0,v0,1
     bbc:	afc40018 	sw	a0,24(s8)
     bc0:	00021080 	sll	v0,v0,0x2
     bc4:	8fc40030 	lw	a0,48(s8)
     bc8:	00821021 	addu	v0,a0,v0
     bcc:	8c420000 	lw	v0,0(v0)
     bd0:	ac620000 	sw	v0,0(v1)
     bd4:	1000000d 	b	c0c <arr_merge+0x19c>
     bd8:	00000000 	nop
		}else{
			merged[i] = vector2[p2++];
     bdc:	8fc20020 	lw	v0,32(s8)
     be0:	00021080 	sll	v0,v0,0x2
     be4:	8fc30024 	lw	v1,36(s8)
     be8:	00621821 	addu	v1,v1,v0
     bec:	8fc2001c 	lw	v0,28(s8)
     bf0:	24440001 	addiu	a0,v0,1
     bf4:	afc4001c 	sw	a0,28(s8)
     bf8:	00021080 	sll	v0,v0,0x2
     bfc:	8fc40038 	lw	a0,56(s8)
     c00:	00821021 	addu	v0,a0,v0
     c04:	8c420000 	lw	v0,0(v0)
     c08:	ac620000 	sw	v0,0(v1)
	for( int i = 0; i < n1 + n2 ; i++){
     c0c:	8fc20020 	lw	v0,32(s8)
     c10:	24420001 	addiu	v0,v0,1
     c14:	afc20020 	sw	v0,32(s8)
     c18:	8fc30034 	lw	v1,52(s8)
     c1c:	8fc2003c 	lw	v0,60(s8)
     c20:	00621821 	addu	v1,v1,v0
     c24:	8fc20020 	lw	v0,32(s8)
     c28:	0043102b 	sltu	v0,v0,v1
     c2c:	1440ffac 	bnez	v0,ae0 <arr_merge+0x70>
     c30:	00000000 	nop
		}
	}

	return merged;
     c34:	8fc20024 	lw	v0,36(s8)
}
     c38:	03c0e825 	move	sp,s8
     c3c:	8fbf002c 	lw	ra,44(sp)
     c40:	8fbe0028 	lw	s8,40(sp)
     c44:	27bd0030 	addiu	sp,sp,48
     c48:	03e00008 	jr	ra
     c4c:	00000000 	nop

00000c50 <merge_sort>:

//probar diferencias entre int* vector y int vector[]
int* merge_sort(int* vector, size_t n){
     c50:	3c1c0002 	lui	gp,0x2
     c54:	279c91f0 	addiu	gp,gp,-28176
     c58:	0399e021 	addu	gp,gp,t9
     c5c:	27bdffc8 	addiu	sp,sp,-56
     c60:	afbf0034 	sw	ra,52(sp)
     c64:	afbe0030 	sw	s8,48(sp)
     c68:	03a0f025 	move	s8,sp
     c6c:	afbc0010 	sw	gp,16(sp)
     c70:	afc40038 	sw	a0,56(s8)
     c74:	afc5003c 	sw	a1,60(s8)

	//Ordenar nada no sirve
	if ( n < 1 || !vector) return NULL;
     c78:	8fc2003c 	lw	v0,60(s8)
     c7c:	10400004 	beqz	v0,c90 <merge_sort+0x40>
     c80:	00000000 	nop
     c84:	8fc20038 	lw	v0,56(s8)
     c88:	14400004 	bnez	v0,c9c <merge_sort+0x4c>
     c8c:	00000000 	nop
     c90:	00001025 	move	v0,zero
     c94:	10000045 	b	dac <merge_sort+0x15c>
     c98:	00000000 	nop

	//Caso base, se devuelve un nuevo vector con el unico elem de entrada 
	if ( n == 1 ){
     c9c:	8fc3003c 	lw	v1,60(s8)
     ca0:	24020001 	li	v0,1
     ca4:	1462000f 	bne	v1,v0,ce4 <merge_sort+0x94>
     ca8:	00000000 	nop

		int* vector_ordenado = malloc(sizeof(int));
     cac:	24040004 	li	a0,4
     cb0:	8f828098 	lw	v0,-32616(gp)
     cb4:	0040c825 	move	t9,v0
     cb8:	0320f809 	jalr	t9
     cbc:	00000000 	nop
     cc0:	8fdc0010 	lw	gp,16(s8)
     cc4:	afc20018 	sw	v0,24(s8)
		vector_ordenado[0] = vector[0];
     cc8:	8fc20038 	lw	v0,56(s8)
     ccc:	8c430000 	lw	v1,0(v0)
     cd0:	8fc20018 	lw	v0,24(s8)
     cd4:	ac430000 	sw	v1,0(v0)
		return vector_ordenado;
     cd8:	8fc20018 	lw	v0,24(s8)
     cdc:	10000033 	b	dac <merge_sort+0x15c>
     ce0:	00000000 	nop
	}

	//Dividimos el arreglo en do de tama√±o n1 y n2 / n1 + n2 = n
	size_t n1 = n/2;
     ce4:	8fc2003c 	lw	v0,60(s8)
     ce8:	00021042 	srl	v0,v0,0x1
     cec:	afc2001c 	sw	v0,28(s8)
	size_t n2 = n-n1;
     cf0:	8fc3003c 	lw	v1,60(s8)
     cf4:	8fc2001c 	lw	v0,28(s8)
     cf8:	00621023 	subu	v0,v1,v0
     cfc:	afc20020 	sw	v0,32(s8)

	//Merge con las dos mitades
	//"vector" si gue siendo un puntero a la primera posicion de la primera mitad
	//"vector + n1" es un puntero a la primera posicion de la segunda mitad
	int* vector1_ord = merge_sort(vector, n1);
     d00:	8fc5001c 	lw	a1,28(s8)
     d04:	8fc40038 	lw	a0,56(s8)
     d08:	8f828034 	lw	v0,-32716(gp)
     d0c:	0040c825 	move	t9,v0
     d10:	0411ffcf 	bal	c50 <merge_sort>
     d14:	00000000 	nop
     d18:	8fdc0010 	lw	gp,16(s8)
     d1c:	afc20024 	sw	v0,36(s8)
	int* vector2_ord = merge_sort(vector+n1, n2);
     d20:	8fc2001c 	lw	v0,28(s8)
     d24:	00021080 	sll	v0,v0,0x2
     d28:	8fc30038 	lw	v1,56(s8)
     d2c:	00621021 	addu	v0,v1,v0
     d30:	8fc50020 	lw	a1,32(s8)
     d34:	00402025 	move	a0,v0
     d38:	8f828034 	lw	v0,-32716(gp)
     d3c:	0040c825 	move	t9,v0
     d40:	0411ffc3 	bal	c50 <merge_sort>
     d44:	00000000 	nop
     d48:	8fdc0010 	lw	gp,16(s8)
     d4c:	afc20028 	sw	v0,40(s8)

	//Merge
	int* vector_ordenado = arr_merge(vector1_ord,n1,vector2_ord,n2);
     d50:	8fc70020 	lw	a3,32(s8)
     d54:	8fc60028 	lw	a2,40(s8)
     d58:	8fc5001c 	lw	a1,28(s8)
     d5c:	8fc40024 	lw	a0,36(s8)
     d60:	8f828038 	lw	v0,-32712(gp)
     d64:	0040c825 	move	t9,v0
     d68:	0411ff41 	bal	a70 <arr_merge>
     d6c:	00000000 	nop
     d70:	8fdc0010 	lw	gp,16(s8)
     d74:	afc2002c 	sw	v0,44(s8)

	//Libero las dos mitades que ya no me sirven
	free(vector1_ord);
     d78:	8fc40024 	lw	a0,36(s8)
     d7c:	8f8280a0 	lw	v0,-32608(gp)
     d80:	0040c825 	move	t9,v0
     d84:	0320f809 	jalr	t9
     d88:	00000000 	nop
     d8c:	8fdc0010 	lw	gp,16(s8)
	free(vector2_ord);
     d90:	8fc40028 	lw	a0,40(s8)
     d94:	8f8280a0 	lw	v0,-32608(gp)
     d98:	0040c825 	move	t9,v0
     d9c:	0320f809 	jalr	t9
     da0:	00000000 	nop
     da4:	8fdc0010 	lw	gp,16(s8)

	return vector_ordenado;
     da8:	8fc2002c 	lw	v0,44(s8)

}
     dac:	03c0e825 	move	sp,s8
     db0:	8fbf0034 	lw	ra,52(sp)
     db4:	8fbe0030 	lw	s8,48(sp)
     db8:	27bd0038 	addiu	sp,sp,56
     dbc:	03e00008 	jr	ra
     dc0:	00000000 	nop
